/**
 * @file
 * This file contains the implementation of RateMatrix_RtRev, which is
 * class that holds a rate matrix in RevBayes.
 *
 * @brief Implementation of RateMatrix_RtRev
 *
 * (c) Copyright 2009- under GPL version 3
 * @date Last modified: $Date: 2012-12-11 14:46:24 +0100 (Tue, 11 Dec 2012) $
 * @author The RevBayes Development Core Team
 * @license GPL version 3
 * @version 1.0
 * @since 2009-08-27, version 1.0
 * @interface Mcmc
 * @package distributions
 *
 * $Id: RateMatrix_RtRev.cpp 1921 2012-12-11 13:46:24Z hoehna $
 */

#include "RateMatrix_RtRev.h"
#include "RbException.h"
#include "RbMathMatrix.h"
#include "TransitionProbabilityMatrix.h"


using namespace RevBayesCore;

/** Construct rate matrix with n states */
RateMatrix_RtRev::RateMatrix_RtRev( void ) : RateMatrix_Empirical( 20 ){
    
    MatrixReal &m = *the_rate_matrix;
    
    /* RtRev */	
    m[ 0][ 0] =   0; m[ 1][ 0] =  34; m[ 2][ 0] =  51; m[ 3][ 0] =  10; m[ 4][ 0] = 439;
	m[ 5][ 0] =  32; m[ 6][ 0] =  81; m[ 7][ 0] = 135; m[ 8][ 0] =  30; m[ 9][ 0] =   1;
	m[10][ 0] =  45; m[11][ 0] =  38; m[12][ 0] = 235; m[13][ 0] =   1; m[14][ 0] =  97;
	m[15][ 0] = 460; m[16][ 0] = 258; m[17][ 0] =   5; m[18][ 0] =  55; m[19][ 0] = 197;
	m[ 0][ 1] =  34; m[ 1][ 1] =   0; m[ 2][ 1] =  35; m[ 3][ 1] =  30; m[ 4][ 1] =  92;
	m[ 5][ 1] = 221; m[ 6][ 1] =  10; m[ 7][ 1] =  41; m[ 8][ 1] =  90; m[ 9][ 1] =  24;
	m[10][ 1] =  18; m[11][ 1] = 593; m[12][ 1] =  57; m[13][ 1] =   7; m[14][ 1] =  24;
	m[15][ 1] = 102; m[16][ 1] =  64; m[17][ 1] =  13; m[18][ 1] =  47; m[19][ 1] =  29;
	m[ 0][ 2] =  51; m[ 1][ 2] =  35; m[ 2][ 2] =   0; m[ 3][ 2] = 384; m[ 4][ 2] = 128;
	m[ 5][ 2] = 236; m[ 6][ 2] =  79; m[ 7][ 2] =  94; m[ 8][ 2] = 320; m[ 9][ 2] =  35;
	m[10][ 2] =  15; m[11][ 2] = 123; m[12][ 2] =   1; m[13][ 2] =  49; m[14][ 2] =  33;
	m[15][ 2] = 294; m[16][ 2] = 148; m[17][ 2] =  16; m[18][ 2] =  28; m[19][ 2] =  21;
	m[ 0][ 3] =  10; m[ 1][ 3] =  30; m[ 2][ 3] = 384; m[ 3][ 3] =   0; m[ 4][ 3] =   1;
	m[ 5][ 3] =  78; m[ 6][ 3] = 542; m[ 7][ 3] =  61; m[ 8][ 3] =  91; m[ 9][ 3] =   1;
	m[10][ 3] =   5; m[11][ 3] =  20; m[12][ 3] =   1; m[13][ 3] =   1; m[14][ 3] =  55;
	m[15][ 3] = 136; m[16][ 3] =  55; m[17][ 3] =   1; m[18][ 3] =   1; m[19][ 3] =   6;
	m[ 0][ 4] = 439; m[ 1][ 4] =  92; m[ 2][ 4] = 128; m[ 3][ 4] =   1; m[ 4][ 4] =   0;
	m[ 5][ 4] =  70; m[ 6][ 4] =   1; m[ 7][ 4] =  48; m[ 8][ 4] = 124; m[ 9][ 4] = 104;
	m[10][ 4] = 110; m[11][ 4] =  16; m[12][ 4] = 156; m[13][ 4] =  70; m[14][ 4] =   1;
	m[15][ 4] =  75; m[16][ 4] = 117; m[17][ 4] =  55; m[18][ 4] = 131; m[19][ 4] = 295;
	m[ 0][ 5] =  32; m[ 1][ 5] = 221; m[ 2][ 5] = 236; m[ 3][ 5] =  78; m[ 4][ 5] =  70;
	m[ 5][ 5] =   0; m[ 6][ 5] = 372; m[ 7][ 5] =  18; m[ 8][ 5] = 387; m[ 9][ 5] =  33;
	m[10][ 5] =  54; m[11][ 5] = 309; m[12][ 5] = 158; m[13][ 5] =   1; m[14][ 5] =  68;
	m[15][ 5] = 225; m[16][ 5] = 146; m[17][ 5] =  10; m[18][ 5] =  45; m[19][ 5] =  36;
	m[ 0][ 6] =  81; m[ 1][ 6] =  10; m[ 2][ 6] =  79; m[ 3][ 6] = 542; m[ 4][ 6] =   1;
	m[ 5][ 6] = 372; m[ 6][ 6] =   0; m[ 7][ 6] =  70; m[ 8][ 6] =  34; m[ 9][ 6] =   1;
	m[10][ 6] =  21; m[11][ 6] = 141; m[12][ 6] =   1; m[13][ 6] =   1; m[14][ 6] =  52;
	m[15][ 6] =  95; m[16][ 6] =  82; m[17][ 6] =  17; m[18][ 6] =   1; m[19][ 6] =  35;
	m[ 0][ 7] = 135; m[ 1][ 7] =  41; m[ 2][ 7] =  94; m[ 3][ 7] =  61; m[ 4][ 7] =  48;
	m[ 5][ 7] =  18; m[ 6][ 7] =  70; m[ 7][ 7] =   0; m[ 8][ 7] =  68; m[ 9][ 7] =   1;
	m[10][ 7] =   3; m[11][ 7] =  30; m[12][ 7] =  37; m[13][ 7] =   7; m[14][ 7] =  17;
	m[15][ 7] = 152; m[16][ 7] =   7; m[17][ 7] =  23; m[18][ 7] =  21; m[19][ 7] =   3;
	m[ 0][ 8] =  30; m[ 1][ 8] =  90; m[ 2][ 8] = 320; m[ 3][ 8] =  91; m[ 4][ 8] = 124;
	m[ 5][ 8] = 387; m[ 6][ 8] =  34; m[ 7][ 8] =  68; m[ 8][ 8] =   0; m[ 9][ 8] =  34;
	m[10][ 8] =  51; m[11][ 8] =  76; m[12][ 8] = 116; m[13][ 8] = 141; m[14][ 8] =  44;
	m[15][ 8] = 183; m[16][ 8] =  49; m[17][ 8] =  48; m[18][ 8] = 307; m[19][ 8] =   1;
	m[ 0][ 9] =   1; m[ 1][ 9] =  24; m[ 2][ 9] =  35; m[ 3][ 9] =   1; m[ 4][ 9] = 104;
	m[ 5][ 9] =  33; m[ 6][ 9] =   1; m[ 7][ 9] =   1; m[ 8][ 9] =  34; m[ 9][ 9] =   0;
	m[10][ 9] = 385; m[11][ 9] =  34; m[12][ 9] = 375; m[13][ 9] =  64; m[14][ 9] =  10;
	m[15][ 9] =   4; m[16][ 9] =  72; m[17][ 9] =  39; m[18][ 9] =  26; m[19][ 9] =1048;
	m[ 0][10] =  45; m[ 1][10] =  18; m[ 2][10] =  15; m[ 3][10] =   5; m[ 4][10] = 110;
	m[ 5][10] =  54; m[ 6][10] =  21; m[ 7][10] =   3; m[ 8][10] =  51; m[ 9][10] = 385;
	m[10][10] =   0; m[11][10] =  23; m[12][10] = 581; m[13][10] = 179; m[14][10] =  22;
	m[15][10] =  24; m[16][10] =  25; m[17][10] =  47; m[18][10] =  64; m[19][10] = 112;
	m[ 0][11] =  38; m[ 1][11] = 593; m[ 2][11] = 123; m[ 3][11] =  20; m[ 4][11] =  16;
	m[ 5][11] = 309; m[ 6][11] = 141; m[ 7][11] =  30; m[ 8][11] =  76; m[ 9][11] =  34;
	m[10][11] =  23; m[11][11] =   0; m[12][11] = 134; m[13][11] =  14; m[14][11] =  43;
	m[15][11] =  77; m[16][11] = 110; m[17][11] =   6; m[18][11] =   1; m[19][11] =  19;
	m[ 0][12] = 235; m[ 1][12] =  57; m[ 2][12] =   1; m[ 3][12] =   1; m[ 4][12] = 156;
	m[ 5][12] = 158; m[ 6][12] =   1; m[ 7][12] =  37; m[ 8][12] = 116; m[ 9][12] = 375;
	m[10][12] = 581; m[11][12] = 134; m[12][12] =   0; m[13][12] = 247; m[14][12] =   1;
	m[15][12] =   1; m[16][12] = 131; m[17][12] = 111; m[18][12] =  74; m[19][12] = 236;
	m[ 0][13] =   1; m[ 1][13] =   7; m[ 2][13] =  49; m[ 3][13] =   1; m[ 4][13] =  70;
	m[ 5][13] =   1; m[ 6][13] =   1; m[ 7][13] =   7; m[ 8][13] = 141; m[ 9][13] =  64;
	m[10][13] = 179; m[11][13] =  14; m[12][13] = 247; m[13][13] =   0; m[14][13] =  11;
	m[15][13] =  20; m[16][13] =  69; m[17][13] = 182; m[18][13] =1017; m[19][13] =  92;
	m[ 0][14] =  97; m[ 1][14] =  24; m[ 2][14] =  33; m[ 3][14] =  55; m[ 4][14] =   1;
	m[ 5][14] =  68; m[ 6][14] =  52; m[ 7][14] =  17; m[ 8][14] =  44; m[ 9][14] =  10;
	m[10][14] =  22; m[11][14] =  43; m[12][14] =   1; m[13][14] =  11; m[14][14] =   0;
	m[15][14] = 134; m[16][14] =  62; m[17][14] =   9; m[18][14] =  14; m[19][14] =  25;
	m[ 0][15] = 460; m[ 1][15] = 102; m[ 2][15] = 294; m[ 3][15] = 136; m[ 4][15] =  75;
	m[ 5][15] = 225; m[ 6][15] =  95; m[ 7][15] = 152; m[ 8][15] = 183; m[ 9][15] =   4;
	m[10][15] =  24; m[11][15] =  77; m[12][15] =   1; m[13][15] =  20; m[14][15] = 134;
	m[15][15] =   0; m[16][15] = 671; m[17][15] =  14; m[18][15] =  31; m[19][15] =  39;
	m[ 0][16] = 258; m[ 1][16] =  64; m[ 2][16] = 148; m[ 3][16] =  55; m[ 4][16] = 117;
	m[ 5][16] = 146; m[ 6][16] =  82; m[ 7][16] =   7; m[ 8][16] =  49; m[ 9][16] =  72;
	m[10][16] =  25; m[11][16] = 110; m[12][16] = 131; m[13][16] =  69; m[14][16] =  62;
	m[15][16] = 671; m[16][16] =   0; m[17][16] =   1; m[18][16] =  34; m[19][16] = 196;
	m[ 0][17] =   5; m[ 1][17] =  13; m[ 2][17] =  16; m[ 3][17] =   1; m[ 4][17] =  55;
	m[ 5][17] =  10; m[ 6][17] =  17; m[ 7][17] =  23; m[ 8][17] =  48; m[ 9][17] =  39;
	m[10][17] =  47; m[11][17] =   6; m[12][17] = 111; m[13][17] = 182; m[14][17] =   9;
	m[15][17] =  14; m[16][17] =   1; m[17][17] =   0; m[18][17] = 176; m[19][17] =  26;
	m[ 0][18] =  55; m[ 1][18] =  47; m[ 2][18] =  28; m[ 3][18] =   1; m[ 4][18] = 131;
	m[ 5][18] =  45; m[ 6][18] =   1; m[ 7][18] =  21; m[ 8][18] = 307; m[ 9][18] =  26;
	m[10][18] =  64; m[11][18] =   1; m[12][18] =  74; m[13][18] =1017; m[14][18] =  14;
	m[15][18] =  31; m[16][18] =  34; m[17][18] = 176; m[18][18] =   0; m[19][18] =  59;
	m[ 0][19] = 197; m[ 1][19] =  29; m[ 2][19] =  21; m[ 3][19] =   6; m[ 4][19] = 295;
	m[ 5][19] =  36; m[ 6][19] =  35; m[ 7][19] =   3; m[ 8][19] =   1; m[ 9][19] =1048;
	m[10][19] = 112; m[11][19] =  19; m[12][19] = 236; m[13][19] =  92; m[14][19] =  25;
	m[15][19] =  39; m[16][19] = 196; m[17][19] =  26; m[18][19] =  59; m[19][19] =   0;

	stationary_freqs[ 0] = 0.0646;
	stationary_freqs[ 1] = 0.0453;
	stationary_freqs[ 2] = 0.0376;
	stationary_freqs[ 3] = 0.0422;
	stationary_freqs[ 4] = 0.0114;
	stationary_freqs[ 5] = 0.0606;
	stationary_freqs[ 6] = 0.0607;
	stationary_freqs[ 7] = 0.0639;
	stationary_freqs[ 8] = 0.0273;
	stationary_freqs[ 9] = 0.0679;
	stationary_freqs[10] = 0.1018;
	stationary_freqs[11] = 0.0751;
	stationary_freqs[12] = 0.0150;
	stationary_freqs[13] = 0.0287;
	stationary_freqs[14] = 0.0681;
	stationary_freqs[15] = 0.0488;
	stationary_freqs[16] = 0.0622;
	stationary_freqs[17] = 0.0251;
	stationary_freqs[18] = 0.0318;
	stationary_freqs[19] = 0.0619;

    
    
    // set the diagonal values
    setDiagonal();
    
    // rescale 
    rescaleToAverageRate( 1.0 );
    
    // update the eigensystem
    updateEigenSystem();
    
}


/** Destructor */
RateMatrix_RtRev::~RateMatrix_RtRev(void) {
    
}




RateMatrix_RtRev* RateMatrix_RtRev::clone( void ) const {
    return new RateMatrix_RtRev( *this );
}


