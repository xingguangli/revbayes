# Test file for mcmc on gtr model with primates dataset

# read the data
# the readDiscreteCharacterData function returns a vector of matrices. We just take the first one
D <- readDiscreteCharacterData(file="data/test_data_clock_gtr.nex")
T <- readTrees("data/true_calib_clk.tre")[1]


#######################################
###### birth-death process priors #####
#######################################

## diversification = birth_rate - death_rate
div_lambda <- 1.0 / 5.0	
diversification ~ dnExponential(div_lambda) 
diversification.setValue(0.05)

## turnover = death_rate / birth_rate
turn_alpha <- 2.0
turn_beta <- 2.0
turnover ~ dnBeta(turn_alpha, turn_beta) 

## Creating deterministic nodes for birth & death rates to match previous implmentation
denom := abs(1.0 - turnover) # even though this will always be pos, this is needed for det nodes to be RealPos for cBDP
birth_rate := diversification / (denom)
death_rate := (turnover * diversification) / (denom)

## putting a Normal prior on the age of the origin
mean_origin <- treeHeight(T) * 1.5	
stdv_origin <- 20.0
origin_time ~ dnNorm(mean_origin, stdv_origin)
rp_ot := abs(origin_time) # there's no truncated normal, and origin must be RealPos for cBDP

rho <- 1.0

# get some useful variables from the data
n_taxa <- D.ntaxa()
n_sites <- D.nchar(1)
names <- D.names()

# tree from birth-death process 
tau ~ dnBDP(lambda=birth_rate, mu=death_rate, origin=rp_ot, rho=rho, samplingStrategy="uniform", condition="nTaxa", nTaxa=n_taxa, names=names)


tree_height := treeHeight(tau)
tau.setValue(T)


####################################
#### DPP Model on Branch Rates #####
####################################


n_branches <- 2 * n_taxa - 2

## concentration parameter ##
pr_mean_cats <- 3.0
mean_CP <- fnDPPConcFromMean(pr_mean_cats, n_branches) 
cp_shape <- 2.0
cp_rate <- cp_shape / mean_CP
concentration ~ dnGamma(cp_shape, cp_rate)


## G_0 ##
g0_a <- 4.0
g0_b <- 8.0
g0 = dnGamma(g0_a, g0_b)



branch_rates ~ dnDPP(concentration=concentration, baseDistribution=g0, numElements=n_branches) 

## a deterministic node for the number of DPP categories
## this is needed for the Gibbs move on the concentration
n_cats := fnNumUniqueInVector(branch_rates) 



## create a deterministic node of scaled branch_rates
## this rescales the time units of the time tree so that the 
### branch rates aren't so tiny 
scale_rate <- 0.01
for (i in 1:branch_rates.size()) {
	branch_subrates[i] := branch_rates[i] * scale_rate
}

## a statistic to monitor
mean_brate := mean(branch_rates) ## Mean func


####################################
##### substition model priors ######
####################################

write("Create substitution model.")

bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dnDirichlet(bf)
er ~ dnDirichlet(e)
# the rate matrix
Q := fnGTR(er,pi)

pi1 := pi[1]


# the sequence evolution model
phySeq ~ dnPhyloCTMC(tree=tau, Q=Q, branchRates=branch_subrates, nSites=n_sites, type="DNA")

# attach the data
phySeq.clamp(D)


moves[1] = mvScale(diversification,lambda=1.0,tune=true,weight=1.0)
moves[2] = mvScale(turnover,lambda=1.0,tune=true,weight=2.0)
moves[3] = mvNodeTimeSlideUniform(tau, weight=30.0)
moves[4] = mvRootTimeSlide(tau, delta=50.0, tune=true, weight=10.0)

moves[5] = mvOriginTimeSlide(origin_time, tau, delta=50.0, tune=true, weight=10.0)

moves[6] = mvSimplexElementScale(pi, alpha=100.0, tune=true, weight=4.0)
moves[7] = mvSimplexElementScale(er, alpha=100.0, tune=true, weight=6.0)


moves[8] = mvDPPScaleCatVals(branch_rates, ln(2.0), 3.0)
moves[9] = mvDPPAllocateAuxGibbs(branch_rates, 4, 3.0)
moves[10] = mvDPPGibbsConcentration(concentration, n_cats, cp_shape, cp_rate, n_branches, 2.0)

mymodel = model(pi)


monitors[1] = mnModel(filename="dpp_rclock_test.log",printgen=10)
monitors[2] = mnFile(filename="dpp_rclock_test.trees",printgen=10, tau)
monitors[3] = mnScreen(printgen=10, pi1, mean_brate, n_cats, concentration)

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=200,tuningInterval=50)
mymcmc.run(generations=400)

mymcmc.operatorSummary()

treetrace = readTreeTrace("dpp_rclock_test.trees")
treetrace.summarize()

mapTree(treetrace,"dpp_rclock_test_MAP.tre")

write(file="result.txt", append=TRUE, "Finished DPP_clock.Rev")

q()
