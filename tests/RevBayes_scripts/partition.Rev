################################################################################
#
# RevBayes Exercise: Calculating Marginal Liklihoods and Bayes Factors to test
#  data partitioning strategies
# 
# This file: Runs the full MCMC assuming a model that partitions the alignment
#            into two genes and the second gene by codon position. 
#
# authors: Tracy A. Heath, Michael Landis, and Sebastian Hoehna
#
################################################################################

# Read in sequence data for both genes #
data[1] <- readDiscreteCharacterData("data/conifer_atpB.nex")
data_rbcL <- readDiscreteCharacterData("data/conifer_rbcL.nex")

# Specify the partition for 1st codon position
data[2] <- data_rbcL
data[2].setCodonPartition(1)

# Specify the partition for 2nd codon position
data[3] <- data_rbcL
data[3].setCodonPartition(2)

# Specify the partition for 3rd codon position
data[4] <- data_rbcL
data[4].setCodonPartition(3)

# A variable for the number of partitions #
n_parts <- data.size()

# Get some useful variables from the data needed for specifying the model #
n_species <- data[1].ntaxa()
names <- data[1].names()
n_branches <- 2 * n_species - 3

#####################################
#   Substitution Model: GTR+G * 4   #
#   looping over partitions         #
#####################################
mi <- 0 # an iterator for the move vector
for (i in 1:n_parts){
  ## index i=1 : atpB gene
  ## index i=2 : rbcL gene position 1
  ## index i=3 : rbcL gene position 2
  ## index i=4 : rbcL gene position 3

  # Exchangeability rates #
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[mi++] = mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 

  # Stationary base frequencies #
  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])
  moves[mi++] = mvSimplexElementScale(sf[i], alpha=10, tune=true, weight=2) 

  # Instantaneous rate matrix (deterministic) #
  Q[i] := fnGTR(er[i],sf[i]) 

  # Gamma-dist site rates #
  shape_prior[i] <- 0.05 
  shape[i] ~ dnExponential( shape_prior[i] )
  gamma_rates[i] := fnDiscretizeGamma( shape[i], shape[i], 4 )
  moves[mi++] = mvScale(shape[i], lambda=0.8, tune=true, weight=3.0)
}

######################################
#   Tree topology & Branch lengths   #
#   shared for all sites             #
######################################
# Unrooted tree topology distribution #
topology ~ dnUniformTopology(n_species, names)

# Tree topology moves #
moves[mi++] = mvNNI(topology, weight=10.0)
moves[mi++] = mvSPR(topology, weight=5.0)

#### Specify a prior and moves on the branch lengths #### 
# Create a vector of branch-length variables using a for loop #
for (i in 1:n_branches) {
  br_lens[i] ~ dnExponential(10.0)
  moves[mi++] = mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
}

# A deterministic node for the tree length #
tree_length := sum(br_lens)

# Build the tree by combining the topology with the vector of branch lengths #
phylogeny := treeAssembly(topology, br_lens)


### Create the DAG for each partition using a loop ###
for (i in 1:n_parts){
  # The sequence evolution model links the tree and GTR+G parameter #
  phyloSeq[i] ~ dnPhyloCTMC(tree=phylogeny, Q=Q[i], siteRates=gamma_rates[i], nSites=data[i].nchar(1), type="DNA")

  # Attach the data #
  phyloSeq[i].clamp(data[i])
}

# Specify the full model by indicating a single node in the DAG #
mymodel = model(topology)

# Set up file and screen monitors #
monitors[1] = mnModel(filename="output/conifer_genecodon.log",printgen=10)
monitors[2] = mnFile(filename="output/conifer_genecodon.trees",printgen=10, phylogeny)
monitors[3] = mnScreen(printgen=10, shape[1], shape[2], shape[3], shape[4], tree_length)

# Instantiate the MCMC analysis #
mymcmc = mcmc(mymodel, monitors, moves)

# Start the chain and burn-in for several generations #
mymcmc.burnin(generations=200,tuningInterval=50)

# Run the MCMC and sample states #
mymcmc.run(generations=400)


## Summarize MCMC output (tree topology/branch lengths) ##
# Read in & summarize the sampled states #
treetrace = readTreeTrace("output/conifer_genecodon.trees", treetype="non-clock")
treetrace.summarize()

# Write the maximum a posteriori tree to file #
mapTree(treetrace,"output/conifer_genecodon_map.tre")

write(file="result.txt", append=TRUE, "Finished partition.Rev")

q()

