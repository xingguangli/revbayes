# Example where slice sampling beats standard MH.
# Example from Section 8 of Radford Neal's technical report "Slice Sampling"
#
# Here MH gets 10 times more iterations than slice sampling.
#
#   Slice sampling: mean(v) ~ -0.08     stddev(v) = 3.09   ESS = 275
#   MH Slide      : mean(v) = -0.476    stddev(v) = 2.34   ESS = 259  (10 times more samples!)
#   Truth         : mean(v) =  0.0      stddev(v) = 3.0

mi1 <- 0
mi2 <- 0

v ~ norm(0.0, 3.0)
moves1[mi1++] <- mSlice(v)
moves2[mi2++] <- mSlide(v)
for(i in 1:9)
{
  x[i] ~ norm(0.0, exp(v))
  moves1[mi1++] <- mSlice(x[i])
  moves2[mi2++] <- mSlide(x[i])
}

monitors1 <- [modelmonitor(file="xv-slice.p")]
monitors2 <- [modelmonitor(file="xv-slide.p")]

mymcmc1 <- mcmc(model(v), moves1, monitors1)
mymcmc1.burnin(10000,100)
mymcmc1.run(200000)
mymcmc1.operatorSummary()

mymcmc2 <- mcmc(model(v), moves2, monitors2)
mymcmc2.burnin(10000,100)
mymcmc2.burnin(10000,100)
mymcmc2.burnin(10000,100)
mymcmc2.burnin(10000,100)
mymcmc2.run(2000000)
mymcmc2.operatorSummary()

q()
