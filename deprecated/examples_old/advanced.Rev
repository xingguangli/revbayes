# Test user-defined functions and other advanced
# language features

# We expect both x and y to be
# modified when we reassign to a
function RealPos foo(Real x) x*x
a <- 1.0
x := foo(a)
y := exp(a)
x
y
a <- 2.0
x
y

clear();

# We do not expect x to change
# when we reassign to a
procedure RealPos foo( x ) x*x
a <- 1.0
x := foo(a)
x
a <- 2.0
x

clear()

# Dynamic indexing and control variables
# We expect x to change value when we
# reassign to i, but y, z1 and z2 should
# not change regardless of whether we
# reassign to i or to j.
a[1] <- 1
a[2] <- 2
i <- 1
j <<- 1
x := a[i] * a[i]
y := a[j] * a[j]
z1 <- a[i] * a[i]
z2 <- a[j] * a[j]
x
y
z1
z2
i <- 2
j <- 2
x
y
z1
z2

clear()

# Index bound checking. The element access statement
# should throw an error; uncomment it to test it
a <- [ 1, 2 ]
# a[3]

clear()

# Handling of NA elements in model vectors
# We should be able to print vectors with NA
# elements but not access the value, which is
# typically done when building DAGs. Accessing
# the value, should throw an error (statement
# that is commented out below). We also test
# reassignment here to NA and regular elements
a[1] <- 1
a[3] <- 3
a
str(a)
# b := a
a[1] <- 3
a[2] <- 3
a
b := a
str(b)
model(b)
b

clear()

# Handling of NA elements in workspace vectors
# These use a different mechanism for handling
# NA value elements, so they need to be tested
# separately
x ~ norm(0,1)
moves[1] <- mSlide(x,1.0,1.0)
moves[3] <- mSlide(x,1.0,1.0)
moves
str(moves)
moves[1] <- mSlide(x, 1, 1)
moves[2] <- mSlide(x,1,1)
moves
str(moves)

clear()

#####################################
# Problems raised by Sebastian with the initial version of the 
# new container implementation
#####################################

# Problems with NA/default variables caused problems with this
a[1] <- -1
a[2] <- 1
a
str(a)

clear()

# Problems with simplices caused by a missing ampersand breaking
# a function override. All attempted assignments that are commented
# out below should throw illegal assignment errors and leave the simplex
# intact.
a <- simplex(1,2,3,4)
# a[5] <- 5
# a[1] <- 4
a
b := simplex(1,2,3,4)
# b[5] <- 5
# b[1] <- 4
b

clear()

# Creating vectors of simplices and vectors of vectors
# Vectors of simplices just required registration in RbRegister
# Vectors of vectors is a hack while we are waiting for ModelMatrix,
# but they should work for now.
er_prior[1] <- v(1,1,1,1,1,1)
er_prior
str(er_prior)
str(er_prior[1])
er[1] ~ dirichlet(er_prior[1])
er
str(er)
str(er[1])

clear()

# Creating vectors of abstract elements. The implementation
# of the ModelVectorAbstractElement class was incomplete
# in the version of the code that was originally pushed
# and no vectors of abstract element types had been
# registered in RbRegister.
data[1] <- readCharacterData("data/primates.nex")[1]
data
data[1]
str(data)
str(data[1])

clear()

# Type conversion not working. Initial code did not check for
# cases when no conversion was needed because one element type
# was derived from the other. Note that type conversion currently
# is in-place, which may be problematic in some contexts.
a <- [ 1.0, 2.0, 3.0 ]
str(a)
mean
mean(a)
str(a)

clear()


