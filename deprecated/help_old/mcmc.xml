<?xml version="1.0"?><?xml-stylesheet href="lib/help.xsl" type="text/xsl"?><revbayes-help    xmlns="http://www.revbayes.org/schema/help-entry"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://www.revbayes.org/schema/help-entry lib/rb-help-entry.xsd">    <function-help-entry>        <name>mcmc</name>        <title>Create an MCMC analysis object</title>        <description>            <p>                This function is used to create an MCMC analysis object from a model and associated                monitors and moves.            </p>        </description>        <usage>        <![CDATA[            MCMC mcmc (Model model, Monitor[] monitors, Move[] moves)        ]]>        </usage>        <argument>            <label>model</label>            <description>                The model to use in the analysis. The function makes an independent copy of the model                and stores it internally in the MCMC object.            </description>            <argumentType>fixed</argumentType>            <valueType>Model</valueType>        </argument>        <argument>            <label>monitors</label>            <description>                The monitors to use in the analysis. The function makes an independent copy of the monitors                and stores them internally in the MCMC object.            </description>            <argumentType>fixed</argumentType>            <valueType>Vector of monitors</valueType>        </argument>        <argument>            <label>moves</label>            <description>                The moves to use in the analysis. The function makes an independent copy of the moves                and stores them internally in the MCMC object.            </description>            <argumentType>fixed</argumentType>            <valueType>Vector of moves</valueType>        </argument>        <returnValue>An MCMC object</returnValue>        <details>            <p>                The MCMC analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors.                The MCMC analysis object is used to run Markov chain Monte Carlo (MCMC) simulation on the model, using the provided moves,                to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling                model parameters of interest.            </p>        </details>                <example>        <![CDATA[            # Create a simple model (unclamped)            a ~ exponential(1)            mymodel <- model(a)                        # Create a move vector and a monitor vector            moves[1] <- mScale(a, lambda=1.0, weight=1.0)            monitors[1] <- modelmonitor("out.txt")                        # Create an mcmc object            mymcmcObject <- mcmc( mymodel, monitors, moves)                        # Run a short analysis            mymcmcObject.run( generations = 100)        ]]>        </example>                <author>Sebastian Hoehna</author>                <seeAlso>            <entry>MCMC</entry>            <entry>model</entry>            <entry>Model</entry>            <entry>Move</entry>        </seeAlso>    </function-help-entry>            <type-help-entry>        <name>MCMC</name>        <title>MCMC analysis object</title>        <description>            <p>                The MCMC analysis object keeps a model and the associated moves and monitors.                The object is used to run Markov chain Monte Carlo (MCMC) simulation on                the model, using the provided moves, to obtain a sample of the posterior probability                distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.            </p>        </description>        <memberMethod>            <methodName>MCMC</methodName>            <description> Create an MCMC analysis object (constructor).</description>            <usage>            <![CDATA[                MCMC MCMC (Model model, Monitor[] monitors, Move[] moves)            ]]>            </usage>            <methodType>                mutable            </methodType>            <argument>                <label>model</label>                <description>                    The model to use in the analysis. The constructor makes an independent copy of the model                    and stores it internally in the MCMC object.                </description>                <argumentType>fixed</argumentType>                <valueType>Model</valueType>            </argument>            <argument>                <label>monitors</label>                <description>                    The monitors to use in the analysis. The constructor makes an independent copy of the monitors                    and stores them internally in the MCMC object.                </description>                <argumentType>fixed</argumentType>                <valueType>Vector of monitors</valueType>            </argument>            <argument>                <label>moves</label>                <description>                    The moves to use in the analysis. The constructor makes an independent copy of the moves                    and stores them internally in the MCMC object.                </description>                <argumentType>fixed</argumentType>                <valueType>Vector of moves</valueType>            </argument>            <returnValue>An MCMC object</returnValue>        </memberMethod>            <memberMethod>            <methodName>run</methodName>            <description> Run an MCMC analysis.</description>            <usage>            <![CDATA[                void run (Natural generations)            ]]>            </usage>            <methodType>                mutable            </methodType>            <argument>                <label>generations</label>                <description>                    The number of generations to run. If you have already run an MCMC analysis                    on the object, the previous results will be discarded.                </description>                <argumentType>fixed</argumentType>                <valueType>Natural</valueType>            </argument>            <returnValue>void</returnValue>        </memberMethod>                <memberMethod>            <methodName>burnin</methodName>            <description>                Run a burnin simulation to let the MCMC procedure find the target distribution and to autotune move tuning parameters.                No parameter values are sampled.            </description>            <usage>            <![CDATA[            void burnin (Natural generations, Natural tuningInterval)            ]]>            </usage>            <methodType>                mutable            </methodType>            <argument>                <label>generations</label>                <description>                    The number of generations of the burnin run.                </description>                <argumentType>fixed</argumentType>                <valueType>Natural</valueType>            </argument>            <argument>                <label>tuningInterval</label>                <description>                    The tuning interval in number of generations. The tuning interval must not be larger than the number of generations.                </description>                <argumentType>fixed</argumentType>                <valueType>Natural</valueType>            </argument>            <returnValue>void</returnValue>        </memberMethod>        <details>            <p>                Markov chain Monte Carlo (MCMC) simulation is a numerical method that, in this program, is used                to approximate the posterior probability distribution of the parameters of a model. The basic                sampling mechanism we use is the Metropolis-Hastings algorithm (Metropolis et al. 1953; Hastings 1970).            </p>            <p>                An MCMC simulation is known to converge to the posterior probability distribution, such that the frequency with                which a particular parameter value is sampled is a valid approximation of its posterior probability. However,                convergence to the target distribution may be slow, so it is important to assess convergence to ensure that you                are likely to have a reasonable sample from the posterior.            </p>        </details>        <author>Sebastian Hoehna</author>        <reference>            <citation>                Metropolis N, AW Rosenbluth, MN Rosenbluth, AH Teller, E Teller (1953) Equation of                state calculations by fast computing machines. Journal of Chemical Physics, 21:1087-1092.            </citation>        </reference>        <reference>            <citation>                Hastings WK (1970) Monte Carlo sampling methods using Markov chains and their applications. Biometrika, 57:97-109.            </citation>        </reference>      </type-help-entry></revbayes-help>