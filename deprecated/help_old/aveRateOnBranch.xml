<?xml version="1.0"?>
<?xml-stylesheet href="lib/help.xsl" type="text/xsl"?>

<revbayes-help
	xmlns="http://www.revbayes.org/schema/help-entry"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.revbayes.org/schema/help-entry lib/rb-help-entry.xsd"
>
    <function-help-entry>
    
        <name>aveRateOnBranch</name>

        <title>Average branch rate</title>
    
        <description>
            <p>
            This deterministic function calculates the average rate on a branch of a phylogeny, based on the node rates at both ends.
            </p>
        </description>

        <usage>
            <![CDATA[
             aveRateOnBranch( RealPos[] nodeRates, TimeTree tree, RealPos rootRate, RealPos scaleValue = 1, Integer index )
             ]]> 
        </usage>
    
        <argument>
            <label>nodeRates</label>
            <argumentPassingMethod>by-const-reference</argumentPassingMethod>
            <argumentNodeType>any-DAG-node</argumentNodeType>
            <description>An array of node rates.</description>
            <valueType>RealPos[]</valueType>
        </argument>
        <argument>
            <label>tree</label>
            <argumentPassingMethod>by-const-reference</argumentPassingMethod>
            <argumentNodeType>any-DAG-node</argumentNodeType>
            <description>A time-calibrated phylogeny.</description>
            <valueType>TimeTree</valueType>
        </argument>
        <argument>
            <label>rootRate</label>
            <argumentPassingMethod>by-const-reference</argumentPassingMethod>
            <argumentNodeType>any-DAG-node</argumentNodeType>
            <description>The rate of substitution at the root of the phylogeny.</description>
            <valueType>RealPos</valueType>
        </argument>
        <argument>
            <label>scaleValue</label>
            <argumentPassingMethod>by-const-reference</argumentPassingMethod>
            <argumentNodeType>any-DAG-node</argumentNodeType>
            <description>A scaling coefficient, to be applied multiplicatively across all branch rates.</description>
            <valueType>RealPos</valueType>
            <defaultValue>1</defaultValue>
        </argument>
        <argument>
            <label>index</label>
            <argumentPassingMethod>by-value</argumentPassingMethod>
            <argumentNodeType>any-DAG-node</argumentNodeType>
            <description>The index of the branch of which the rate is being calculated.</description>
            <valueType>Integer</valueType>
        </argument>

        <returnValue>RealPos, Real, RevObject</returnValue>

        <details>
            <p>
            This function is most often applied iteratively across all branches of a phylogeny, based on node rates that have themselves been created using a stochastic process (e.g. an autocorrelated log-normal model, see example below and dnACLN).
            </p>
        </details>

        <example>
            <![CDATA[

                ## read in the tree 
		T <- readTrees("data/bears_dosReis.tre")[1]

                ### Load the sequence alignment
		D <- readDiscreteCharacterData(file="data/bears_irbp.nex")
				
		### get helpful variables from the data
		n_sites <- D.nchar(1)
		n_taxa <- D.ntaxa()
		n_branches <- 2 * n_taxa - 2
		names <- D.names()

		### Specify Yule (pure birth) tree prior
		birth_rate <- 0.1
		root_time ~ dnExponential(0.1, offset=35.0) 
		timetree ~ dnBDP(lambda=birth_rate, mu=0.0, rho=1.0, rootAge=root_time, samplingStrategy="uniform", condition="nTaxa", nTaxa=n_taxa, names=names)
		### set up the base-rate parameter of the ACLN model 
		base_rate <- 0.01

		### set up the variance parameter of the ACLN model 
		nu <- 0.1
		
		### the clock rate at the root of the tree
		root_rate ~ dnGamma(2.0, 4.0)

		### a vector of the rates at each node
		### from the ACLN model, which is conditioned on the tree, nu, the root rate, and base rate
		node_rates ~ dnACLN(timetree, nu, root_rate, base_rate)
		
		### the rate at each branch is the average of the rate at each node separated by that branch
		### a special core function is used to calculate the rate for branch i
		for(i in 1:n_branches){
			branch_rates[i] := aveRateOnBranch(node_rates, timetree, root_rate, base_rate, index=i)
		}
             ]]>

        </example>

        <reference>
            <citation>
	        Thorne J, Kishino H, Painter IS. 1998. Estimating the rate of evolution of the rate of molecular evolution. Mol Biol Evol. 15:1647â€“1657.
            </citation>
        </reference>

        <author>Nicolas Lartillot</author>

        <seeAlso>
            <!-- The xslt page will try to auto generate links to the referred help entries, therefore only exact names of help items should be listed here (case sensitive) -->
            <entry>similar function</entry>
        </seeAlso>


    </function-help-entry>

</revbayes-help>

