<?xml version="1.0"?>
<?xml-stylesheet href="lib/help.xsl" type="text/xsl"?>

<revbayes-help
	xmlns="http://www.revbayes.org/schema/help-entry"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.revbayes.org/schema/help-entry lib/rb-help-entry.xsd"
>
    <move-help-entry>

        <name>mvSymmetricMatrixSimple</name>

        <title>Simple Metropolis-Hastings move on a real symmetric matrix</title>

        <description>
            <p>
            This move function performs a sliding-move update on one random entry of a real symmetric matrix.
            </p>
        </description>
    
        <constructor-help-entry>
        

            <usage>
                <![CDATA[
                 mvSymmetricMatrixSimple( RealSymmetricMatrix x, RealPos lambda = 1, Bool tune = TRUE, RealPos weight = 1 )
                 ]]> 
            </usage>
        
            <argument>
                <label>x</label>
                <argumentPassingMethod>by-reference</argumentPassingMethod>
                <argumentNodeType>stochastic-DAG-node</argumentNodeType>
                <description>The matrix to which the move is applied.</description>
                <valueType>RealSymmetricMatrix</valueType>
            </argument>
            <argument>
                <label>lambda</label>
                <argumentPassingMethod>by-value</argumentPassingMethod>
                <argumentNodeType>any-DAG-node</argumentNodeType>
                <description>The tuning parameter or size of the proposal.</description>
                <valueType>RealPos</valueType>
                <defaultValue>1</defaultValue>
            </argument>
            <argument>
                <label>tune</label>
                <argumentPassingMethod>by-value</argumentPassingMethod>
                <argumentNodeType>any-DAG-node</argumentNodeType>
                <description>This flag specifies if the proposal tuning parameter (lambda) is retuned during the burnin period.</description>
                <valueType>Bool</valueType>
                <defaultValue>TRUE</defaultValue>
            </argument>
            <argument>
                <label>weight</label>
                <argumentPassingMethod>by-value</argumentPassingMethod>
                <argumentNodeType>any-DAG-node</argumentNodeType>
                <description>The expected number of times this move will be applied per iteration.</description>
                <valueType>RealPos</valueType>
                <defaultValue>1</defaultValue>
            </argument>

            <returnValue>Move_VectorSingleElement, Move, WorkspaceObject, RevObject</returnValue>

            <details>
                <p>
                This move proposes a simple, one-component-at-a-time, sliding-move update to a real symmetric matrix. The sliding move is applied to a randomly chosen entry of the matrix (and to the symmetric entry if not along the diagonal). 
                </p>
                <p>
                This move function is very general. In the case of covariance matrices, and using an inverse-Wishart prior, another specialized and more efficient Gibbs sampling move can be used instead: see mvConjugateInverseWishartBrownian.
                </p>
            </details>

            <example>
                <![CDATA[
		# load trait data 
		contData <- readContinuousCharacterData("data/plac40lhtlog.nex")
		nTraits <- contData.nchar()[1]

		# load tree
		tree <- readTrees("data/chronoplac40.tree")[1]

		# covariance matrix with free scaling factor kappa
		kappa ~ dnLogUniform(min=0.001,max=1000)
		Sigma ~ dnInvWishart(dim=nTraits, kappa=kappa, df=nTraits+1)

		# bivariate Brownian process along the tree
		X ~ dnBrownianMultiVariate(tree,sigma=Sigma)

		# clamp process at the tips of the tree to observed trait values
		for (i in 1:nTraits)	{
			X.clampAt(contData,i,i)
		}

		... 

		# set up index for array of moves
		index <- 1

		# a simple move on Sigma
		moves[index++] = mvSymmetricMatrixSimple(Sigma, lambda=1.0, tune=true, weight=10.0)

		# moves on the Brownian process
		moves[index++] = mvMultivariatePhyloProcessSliding(process=X,lambda=1,tune=true,weight=100) 
		moves[index++] = mvMultivariatePhyloProcessTranslation(process=X,lambda=0.1,tune=true,weight=1) 

                 ]]>

            </example>

            <reference>
                <citation>
                </citation>
            </reference>

            <author>Nicolas Lartillot</author>

            <seeAlso>
                <!-- The xslt page will try to auto generate links to the referred help entries, therefore only exact names of help items should be listed here (case sensitive) -->
                <entry>similar function</entry>
            </seeAlso>


        </constructor-help-entry>
    
    

    </move-help-entry>

</revbayes-help>

